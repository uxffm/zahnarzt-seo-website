---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { marked } from 'marked';

// Alle Blog-Artikel laden
export async function getStaticPaths() {
	// Direkt den Fallback-Code verwenden - Content Collection funktioniert nicht
	console.log('üîÑ Using direct file loading method...');
	const { readdir, readFile } = await import('fs/promises');
	const { join } = await import('path');
	
	const blogDir = join(process.cwd(), 'src/content/blog');
	const files = await readdir(blogDir);
	const mdFiles = files.filter((f: string) => f.endsWith('.md'));
	
	console.log('üìÅ Markdown files found:', mdFiles);
	
	return Promise.all(mdFiles.map(async (filename: string) => {
		const filePath = join(blogDir, filename);
		const content = await readFile(filePath, 'utf-8');
		
		// Einfache Frontmatter-Parsing
		const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
		let data: any = {};
		
		if (frontmatterMatch) {
			const frontmatter = frontmatterMatch[1];
			const lines = frontmatter.split('\n');
			lines.forEach((line: string) => {
				const [key, ...valueParts] = line.split(':');
				if (key && valueParts.length > 0) {
					const value = valueParts.join(':').trim().replace(/^["']|["']$/g, '');
					data[key.trim()] = value;
				}
			});
		}
		
		// Markdown-Inhalt extrahieren (alles nach dem Frontmatter)
		const markdownContent = content.replace(/^---\n[\s\S]*?\n---/, '').trim();
		
		console.log(`\n--- File: ${filename} ---`);
		console.log('Frontmatter data:', JSON.stringify(data, null, 2));
		console.log('Frontmatter slug:', data.slug);
		
		// Verwende den slug aus dem Frontmatter oder entferne .md vom Dateinamen
		const slug = data.slug || filename.replace('.md', '');
		console.log(`‚úÖ Generating route: ${filename} -> ${slug}`);
		
		// Tags als Array behandeln (falls sie als String geladen werden)
		const tags = typeof data.tags === 'string' 
			? data.tags.replace(/[\[\]']/g, '').split(', ').filter((tag: string) => tag.trim())
			: Array.isArray(data.tags) 
				? data.tags 
				: [];
		
		// Author und Image mit Fallbacks
		const author = data.author || "DentalSEO Pro";
		const image = data.image || data.img || "/blog/default-image.jpg";
		
		return {
			params: { slug },
			props: { 
				post: {
					id: filename,
					data: {
						...data,
						tags: tags,
						author: author,
						image: image
					},
					body: markdownContent
				}
			}
		};
	}));
}

const { post } = Astro.props;

// Fallback: Markdown direkt rendern
const Content = post.body;
---

<Layout 
	title={post.data.title}
	description={post.data.description}
			keywords={Array.isArray(post.data.tags) ? post.data.tags.join(', ') : post.data.tags}
>
	<div class="bg-gradient-to-br from-blue-50 to-indigo-100 py-16">
		<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
			<div class="flex items-center justify-center mb-4">
				{post.data.tags && (
					<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
						{Array.isArray(post.data.tags) ? post.data.tags[0] : post.data.tags.replace(/[\[\]']/g, '').split(', ')[0]}
					</span>
				)}
			</div>
			<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">
				{post.data.title}
			</h1>
			<div class="flex items-center justify-center text-gray-600 space-x-4">
				<span>Von {post.data.author}</span>
				<span>‚Ä¢</span>
				<span>{new Date(post.data.pubDate).toLocaleDateString('de-DE', { 
					year: 'numeric', 
					month: 'long', 
					day: 'numeric' 
				})}</span>
			</div>
		</div>
	</div>
	
	<article class="py-16 bg-white">
		<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="prose prose-lg max-w-none">
				<div set:html={marked(post.body)} />
			</div>
			
			<div class="mt-16 pt-8 border-t border-gray-200">
				<div class="flex items-center justify-between">
					<a href="/blog" class="text-blue-600 hover:text-blue-700 font-medium">
						‚Üê Zur√ºck zum Blog
					</a>
					<div class="flex space-x-4">
						{post.data.tags && (
							Array.isArray(post.data.tags) ? 
								post.data.tags.map((tag: string) => (
									<span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
										{tag}
									</span>
								)) :
								post.data.tags.replace(/[\[\]']/g, '').split(', ').map((tag: string) => (
									<span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
										{tag}
									</span>
								))
						)}
					</div>
				</div>
			</div>
		</div>
	</article>
	
	<div class="py-16 bg-gray-50">
		<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
			<h2 class="text-3xl font-bold text-gray-900 mb-6">
				Bereit, Ihre Zahnarztpraxis zu f√∂rdern?
			</h2>
			<p class="text-xl text-gray-600 mb-8">
				Lassen Sie uns gemeinsam Ihre SEO-Strategie entwickeln und mehr Patienten gewinnen.
			</p>
			<div class="flex flex-col sm:flex-row gap-4 justify-center">
				<a href="/contact" class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105">
					Kostenlose Beratung buchen
				</a>
				<a href="/services" class="border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all duration-300 transform hover:scale-105">
					Meine Dienstleistungen
				</a>
			</div>
		</div>
	</div>
</Layout>

<style>
	.prose {
		@apply text-gray-900;
	}
	
	.prose h1 {
		@apply text-3xl font-bold text-gray-900 mb-6;
	}
	
	.prose h2 {
		@apply text-2xl font-bold text-gray-900 mb-4 mt-8;
	}
	
	.prose h3 {
		@apply text-xl font-semibold text-gray-900 mb-3 mt-6;
	}
	
	.prose h4 {
		@apply text-lg font-semibold text-gray-900 mb-2 mt-4;
	}
	
	.prose p {
		@apply text-gray-700 mb-4 leading-relaxed;
	}
	
	.prose ul {
		@apply list-disc list-inside mb-4 space-y-2;
	}
	
	.prose ol {
		@apply list-decimal list-inside mb-4 space-y-2;
	}
	
	.prose li {
		@apply text-gray-700;
	}
	
	.prose strong {
		@apply font-semibold text-gray-900;
	}
	
	.prose em {
		@apply italic text-gray-700;
	}
	
	.prose code {
		@apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-mono;
	}
	
	.prose pre {
		@apply bg-gray-100 p-4 rounded-lg overflow-x-auto mb-4;
	}
	
	.prose pre code {
		@apply bg-transparent p-0;
	}
	
	.prose blockquote {
		@apply border-l-4 border-blue-500 pl-4 italic text-gray-700 mb-4;
	}
	
	.prose a {
		@apply text-blue-600 hover:text-blue-700 underline;
	}
</style>
